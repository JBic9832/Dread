#pragma once

#include "Renderer/Mesh.h"

#include <memory>

namespace Dread {

struct Pyramid {
	Pyramid() {
		m_Mesh = std::make_shared<Mesh>();
		std::vector<Vertex> vertices = {
			// Base (two triangles, y = 0)
			{{-0.5f, 0.0f,  0.5f}, {1,0,0}, {0,0}, {0,-1,0}},
			{{ 0.5f, 0.0f,  0.5f}, {0,1,0}, {1,0}, {0,-1,0}},
			{{ 0.5f, 0.0f, -0.5f}, {0,0,1}, {1,1}, {0,-1,0}},

			{{-0.5f, 0.0f,  0.5f}, {1,0,0}, {0,0}, {0,-1,0}},
			{{ 0.5f, 0.0f, -0.5f}, {0,0,1}, {1,1}, {0,-1,0}},
			{{-0.5f, 0.0f, -0.5f}, {1,1,0}, {0,1}, {0,-1,0}},

			// Front face
			{{0.0f, 1.0f, 0.0f},   {1,1,1}, {0.5f,1}, {0,0.707f,0.707f}},
			{{-0.5f, 0.0f, 0.5f},  {1,0,0}, {0,0},   {0,0.707f,0.707f}},
			{{ 0.5f, 0.0f, 0.5f},  {0,1,0}, {1,0},   {0,0.707f,0.707f}},

			// Right face
			{{0.0f, 1.0f, 0.0f},   {1,1,1}, {0.5f,1}, {0.707f,0.707f,0}},
			{{ 0.5f, 0.0f, 0.5f},  {0,1,0}, {0,0},   {0.707f,0.707f,0}},
			{{ 0.5f, 0.0f, -0.5f}, {0,0,1}, {1,0},   {0.707f,0.707f,0}},

			// Back face
			{{0.0f, 1.0f, 0.0f},   {1,1,1}, {0.5f,1}, {0,0.707f,-0.707f}},
			{{ 0.5f, 0.0f, -0.5f}, {0,0,1}, {0,0},   {0,0.707f,-0.707f}},
			{{-0.5f, 0.0f, -0.5f}, {1,1,0}, {1,0},   {0,0.707f,-0.707f}},

			// Left face
			{{0.0f, 1.0f, 0.0f},   {1,1,1}, {0.5f,1}, {-0.707f,0.707f,0}},
			{{-0.5f, 0.0f, -0.5f}, {1,1,0}, {0,0},   {-0.707f,0.707f,0}},
			{{-0.5f, 0.0f,  0.5f}, {1,0,0}, {1,0},   {-0.707f,0.707f,0}},
		};
		m_Mesh->vao.Bind();
		m_Mesh->vbo.Bind();
		m_Mesh->vbo.UploadVertexDataWithAttribs(vertices);
		m_Mesh->vao.UnbindAll();

		m_Mesh->vertexCount = vertices.size();
	}

	std::shared_ptr<Mesh> m_Mesh;


};

}
